/*
 * This code was generated by CalangoMDA (puppy) for use within the Prodepain
 * their products.The calangoMDA was created by Thiago Soares (tfs.capanema @
 * gmail.com)Â©CalangoDDA 2010
 */
package br.gov.pa.muiraquita.sample.rh.business;

import static br.gov.pa.muiraquita.sample.rh.business.error.EstadoError.DESCRICAO_NULL;
import static br.gov.pa.muiraquita.sample.rh.business.error.EstadoError.ESTADO_DUPLICATED;
import static br.gov.pa.muiraquita.sample.rh.business.error.EstadoError.ESTADO_IMPEDIDO_EXCLUSAO;
import static br.gov.pa.muiraquita.sample.rh.business.error.EstadoError.SIGLA_NULL;

import java.util.List;

import org.apache.commons.lang.StringUtils;

import br.gov.pa.muiraquita.business.AbstractBusiness;
import br.gov.pa.muiraquita.exception.BusinessException;
import br.gov.pa.muiraquita.exception.SystemException;
import br.gov.pa.muiraquita.exception.security.InvalidPassportException;
import br.gov.pa.muiraquita.injection.annotation.Injection;
import br.gov.pa.muiraquita.sample.rh.dao.IEstadoDao;
import br.gov.pa.muiraquita.sample.rh.dto.EstadoDto;
import br.gov.pa.muiraquita.sample.rh.entity.Estado;
import br.gov.pa.muiraquita.sample.rh.util.negocio.TipoOperacao;

public class EstadoBusiness extends AbstractBusiness {

  @Injection
  private IEstadoDao dao;

  private Estado estado;
  private EstadoDto estadoDto;
  
  // Construtor para cadastro
  public EstadoBusiness(EstadoDto estadoDto) {
    this.estadoDto = estadoDto;
  }

  // Construtor para alteracao
  public EstadoBusiness(Estado estado, EstadoDto estadoDto) {
    this.estado = estado;
    this.estadoDto = estadoDto;
  }

  public void validarInclusao() throws SystemException, BusinessException, InvalidPassportException {
    // autorizarAcao(LocationsCDU.CDU_MANTER_ESTADO_CADASTRO);
    verificarCamposObrigatorios();
    if (!handler.haErros()) {
      verificarDuplicacoes(TipoOperacao.CADASTRO);
    }
    handler.throwBusinessErrors();
  }

  public void validarAlteracao() throws SystemException, BusinessException, InvalidPassportException {
    // autorizarAcao(LocationsCDU.CDU_MANTER_ESTADO_ALTERACAO);
    verificarCamposObrigatorios();
    if (!handler.haErros()) {
      verificarDuplicacoes(TipoOperacao.ALTERACAO);
    }
    handler.throwBusinessErrors();
  }

  public void validarExclusao() throws SystemException, BusinessException, InvalidPassportException {
    // autorizarAcao(LocationsCDU.CDU_MANTER_ESTADO_EXCLUSAO);
    if (!handler.haErros()) {
      verificarRegrasParaExclusao();
    }
    handler.throwBusinessErrors();
  }


  private void verificarCamposObrigatorios() {

    if (StringUtils.isEmpty(this.estadoDto.getDescricao())) {
      handler.VALIDATION_ERROR(DESCRICAO_NULL);
    }
    if (StringUtils.isEmpty(this.estadoDto.getSigla())) {
      handler.VALIDATION_ERROR(SIGLA_NULL);
    }
  }

  private void verificarDuplicacoes(TipoOperacao operacao) {
    
    List<Estado> usuarios = dao.findForDuplications(this.estadoDto);  
    
    if (operacao.equals(TipoOperacao.CADASTRO)) {
      if(usuarios.size() > 0) {
        handler.VALIDATION_ERROR(ESTADO_DUPLICATED);
      }
    } else {
      if(usuarios.size() != 0) {
        if(usuarios.size() > 1) {
          handler.VALIDATION_ERROR(ESTADO_DUPLICATED);
        } else {
            if(!usuarios.get(0).getId().equals(this.estado.getId())) {
              handler.VALIDATION_ERROR(ESTADO_DUPLICATED);
            }
        }
      }
    }
  }

  private void verificarRegrasParaExclusao() {
    if (false) {
      handler.VALIDATION_ERROR(ESTADO_IMPEDIDO_EXCLUSAO);
    }
  }

}