#set ($package = ${data.config.mainPackage})
#set ($modelName = ${data.crud.name})
#set ($lowercasedModelName = $stringUtils.unCapitalizeFirstLetter($modelName))
#set ($uppercasedModelName = $modelName.toUpperCase())
package ${package}.business;

import static ${package}.business.error.${modelName}Error.DESCRICAO_NULL;
import static ${package}.business.error.${modelName}Error.ESTADO_CANNOT_DELETE;
import static ${package}.business.error.${modelName}Error.ESTADO_DUPLICATED;
import static ${package}.business.error.${modelName}Error.SIGLA_NULL;

import java.util.List;

import org.apache.commons.lang.StringUtils;

import ${package}.dao.I${modelName}Dao;
import ${package}.dto.${modelName}Dto;
import ${package}.entity.${modelName};
import ${package}.util.negocio.TipoOperacao;



import br.gov.pa.muiraquita.business.AbstractBusiness;
import br.gov.pa.muiraquita.exception.BusinessException;
import br.gov.pa.muiraquita.exception.SystemException;
import br.gov.pa.muiraquita.exception.security.InvalidPassportException;
import br.gov.pa.muiraquita.injection.annotation.Injection;

public class ${modelName}Business extends AbstractBusiness {

  @Injection
  private I${modelName}Dao dao;

  private ${modelName} ${lowercasedModelName};
  private ${modelName}Dto ${lowercasedModelName}Dto;
  
  public ${modelName}Business(${modelName}Dto ${lowercasedModelName}Dto) {
    this.${lowercasedModelName}Dto = ${lowercasedModelName}Dto;
  }

  public ${modelName}Business(${modelName} ${lowercasedModelName}, ${modelName}Dto ${lowercasedModelName}Dto) {
    this.${lowercasedModelName} = ${lowercasedModelName};
    this.${lowercasedModelName}Dto = ${lowercasedModelName}Dto;
  }

  public void validarInclusao() throws SystemException, BusinessException, InvalidPassportException {
    verificarCamposObrigatorios();
    if (!handler.haErros()) {
      verificarDuplicacoes(TipoOperacao.CADASTRO);
    }
    handler.throwBusinessErrors();
  }

  public void validarAlteracao() throws SystemException, BusinessException, InvalidPassportException {
    verificarCamposObrigatorios();
    if (!handler.haErros()) {
      verificarDuplicacoes(TipoOperacao.ALTERACAO);
    }
    handler.throwBusinessErrors();
  }

  public void validarExclusao() throws SystemException, BusinessException, InvalidPassportException {
    if (!handler.haErros()) {
      verificarRegrasParaExclusao();
    }
    handler.throwBusinessErrors();
  }

  private void verificarCamposObrigatorios() {
    
    //FOR
    
    if (StringUtils.isEmpty(this.${lowercasedModelName}Dto.getDescricao())) {
      handler.VALIDATION_ERROR(DESCRICAO_NULL);
    }
    if (StringUtils.isEmpty(this.${lowercasedModelName}Dto.getSigla())) {
      handler.VALIDATION_ERROR(SIGLA_NULL);
    }
    //
    
  }

  private void verificarDuplicacoes(TipoOperacao operacao) {
    
    List<${modelName}> usuarios = dao.findForDuplications(this.${lowercasedModelName}Dto);  
    
    if (operacao.equals(TipoOperacao.CADASTRO)) {
      if(usuarios.size() > 0) {
        handler.VALIDATION_ERROR(ESTADO_DUPLICATED);
      }
    } else {
      if(usuarios.size() != 0) {
        if(usuarios.size() > 1) {
          handler.VALIDATION_ERROR(ESTADO_DUPLICATED);
        } else {
            if(!usuarios.get(0).getId().equals(this.${lowercasedModelName}.getId())) {
              handler.VALIDATION_ERROR(ESTADO_DUPLICATED);
            }
        }
      }
    }
  }

  private void verificarRegrasParaExclusao() {
    if (false) {
      handler.VALIDATION_ERROR(ESTADO_CANNOT_DELETE);
    }
  }
}